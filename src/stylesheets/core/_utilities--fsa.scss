// -----------------------------------------------------------------------------
// Breakpoints
// scss-lint:disable SpaceAfterComma
$breakpoints: (
  '(min-width: 15em)' 'XS',       //  240px at 16px base font
  '(min-width: 20em)' 'S',        //  320px at 16px base font
  '(min-width: 30em)' 'SM',       //  480px at 16px base font
  '(min-width: 35em)' 'M',        //  560px at 16px base font
  '(min-width: 42em)' 'MML',      //  672px at 16px base font
  '(min-width: 48em)' 'ML',       //  768px at 16px base font
  '(min-width: 54em)' 'MLL',      //  864px at 16px base font
  '(min-width: 61.25em)' 'L',     //  980px at 16px base font
  '(min-width: 64em)' 'XL',       // 1024px at 16px base font
  '(min-width: 78.75em)' 'XXL'    // 1260px at 16px base font
);

//  From HugoG: http://hugogiraudel.com/2014/01/13/sass-string-replacement-function/
// http://sassmeister.com/gist/1b4f2da5527830088e4d
// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// -----------------------------------------------------------------------------
// Breakpoints: Primary collection of available media query breakpoints
@mixin breakpoint($point, $direction: 'up') {
  @each $breakpoint in $breakpoints {
    $query: nth($breakpoint, 1);
    $name: nth($breakpoint, 2);

    @if $direction == up {
      @if ($name == $point) {
        @media #{$query} { @content }
      }
    } @else {
      @if ($name == $point) {
        @media #{str-replace($query, "min", "max")} {
          @content
        }
      }
    }
  }
}

// -----------------------------------------------------------------------------
// Typography: Progressive font-size scale
//
// Example usage: @include font-size(0); is SMALLEST available size
// Example usage: @include font-size(9); is LARGEST available size
@mixin font-size($scale: 3) {
  @if $scale == 0 { font-size: $font-size-0; }
  @if $scale == 1 { font-size: $font-size-1; }
  @if $scale == 2 { font-size: $font-size-2; }
  @if $scale == 3 { font-size: $font-size-3; }
  @if $scale == 4 { font-size: $font-size-4; line-height: $heading-line-height; }
  @if $scale == 5 { font-size: $font-size-5; line-height: $heading-line-height; }
  @if $scale == 6 { font-size: $font-size-6; line-height: $heading-line-height; }
  @if $scale == 7 { font-size: $font-size-7; line-height: $heading-line-height; }
  @if $scale == 8 { font-size: $font-size-8; line-height: $heading-line-height; }
  @if $scale == 9 { font-size: $font-size-9; line-height: $heading-line-height; }
}

// -----------------------------------------------------------------------------
// CSS Triangles
// We use this to create equilateral triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
// Sourced from foundation.zurb.com
//
// Example usage:
// @include css-triangle(10px, #fff, top);
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {

  content: '';
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;

  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent;
    border-top-style: solid;
  }

  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color;
    border-bottom-style: solid;
  }

  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }

  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// -----------------------------------------------------------------------------
// Positioning
// If one of "$coordinates" is unitless, it omits the prop/val pair,
// e.g. '0' instead of '0px'
//
// Example usage:
// @include position(absolute, 0px 0px 0px 0); (note last 0 has no
// unit, e.g. 'px')
@mixin position($position: relative, $coordinates: 0 0 0 0) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }

  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }

  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }

  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}

// -----------------------------------------------------------------------------
// Reset <ul> (note, you'll likely want reset-li() too
@mixin reset-ul() {
  display: block;
  list-style-type: none;
  margin: 0;
  padding: 0;
}

// -----------------------------------------------------------------------------
// Reset <ul> (note, you'll likely want reset-li() too
@mixin reset-li() {
  display: list-item;
  margin: 0;

  &:before {
    display: none;
  }

  &:after {
    display: none;
  }
}
